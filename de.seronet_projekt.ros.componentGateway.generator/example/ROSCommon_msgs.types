CommObjectsRepository ROSCommon_msgs version 1.0.0 {
CommObject Geometry_msgs_Accel {
	linear : Geometry_msgs_Vector3
	angular : Geometry_msgs_Vector3
}

CommObject Geometry_msgs_AccelStamped {
	header : ROSRos_core.Std_msgs_Header
	accel : Geometry_msgs_Accel
}

CommObject Geometry_msgs_AccelWithCovariance {
	accel : Geometry_msgs_Accel
	covariance : Double[*]
}

CommObject Geometry_msgs_AccelWithCovarianceStamped {
	header : ROSRos_core.Std_msgs_Header
	accel : Geometry_msgs_AccelWithCovariance
}

CommObject Geometry_msgs_Inertia {
	m : Double
	com : Geometry_msgs_Vector3
	ixx : Double
	ixy : Double
	ixz : Double
	iyy : Double
	iyz : Double
	izz : Double
}

CommObject Geometry_msgs_InertiaStamped {
	header : ROSRos_core.Std_msgs_Header
	inertia : Geometry_msgs_Inertia
}

CommObject Geometry_msgs_Point {
	x : Double
	y : Double
	z : Double
}

CommObject Geometry_msgs_Point32 {
	x : Float
	y : Float
	z : Float
}

CommObject Geometry_msgs_PointStamped {
	header : ROSRos_core.Std_msgs_Header
	point : Geometry_msgs_Point
}

CommObject Geometry_msgs_Polygon {
	points : Geometry_msgs_Point32[*]
}

CommObject Geometry_msgs_PolygonStamped {
	header : ROSRos_core.Std_msgs_Header
	polygon : Geometry_msgs_Polygon
}

CommObject Geometry_msgs_Pose {
	position : Geometry_msgs_Point
	orientation : Geometry_msgs_Quaternion
}

CommObject Geometry_msgs_Pose2D {
	x : Double
	y : Double
	theta : Double
}

CommObject Geometry_msgs_PoseArray {
	header : ROSRos_core.Std_msgs_Header
	poses : Geometry_msgs_Pose[*]
}

CommObject Geometry_msgs_PoseStamped {
	header : ROSRos_core.Std_msgs_Header
	pose : Geometry_msgs_Pose
}

CommObject Geometry_msgs_PoseWithCovariance {
	pose : Geometry_msgs_Pose
	covariance : Double[*]
}

CommObject Geometry_msgs_PoseWithCovarianceStamped {
	header : ROSRos_core.Std_msgs_Header
	pose : Geometry_msgs_PoseWithCovariance
}

CommObject Geometry_msgs_Quaternion {
	x : Double
	y : Double
	z : Double
	w : Double
}

CommObject Geometry_msgs_QuaternionStamped {
	header : ROSRos_core.Std_msgs_Header
	quaternion : Geometry_msgs_Quaternion
}

CommObject Geometry_msgs_Transform {
	translation : Geometry_msgs_Vector3
	rotation : Geometry_msgs_Quaternion
}

CommObject Geometry_msgs_TransformStamped {
	header : ROSRos_core.Std_msgs_Header
	child_frame_id : String
	transform : Geometry_msgs_Transform
}

CommObject Geometry_msgs_Twist {
	linear : Geometry_msgs_Vector3
	angular : Geometry_msgs_Vector3
}

CommObject Geometry_msgs_TwistStamped {
	header : ROSRos_core.Std_msgs_Header
	twist : Geometry_msgs_Twist
}

CommObject Geometry_msgs_TwistWithCovariance {
	twist : Geometry_msgs_Twist
	covariance : Double[*]
}

CommObject Geometry_msgs_TwistWithCovarianceStamped {
	header : ROSRos_core.Std_msgs_Header
	twist : Geometry_msgs_TwistWithCovariance
}

CommObject Geometry_msgs_Vector3 {
	x : Double
	y : Double
	z : Double
}

CommObject Geometry_msgs_Vector3Stamped {
	header : ROSRos_core.Std_msgs_Header
	vector : Geometry_msgs_Vector3
}

CommObject Geometry_msgs_Wrench {
	force : Geometry_msgs_Vector3
	torque : Geometry_msgs_Vector3
}

CommObject Geometry_msgs_WrenchStamped {
	header : ROSRos_core.Std_msgs_Header
	wrench : Geometry_msgs_Wrench
}

CommObject Actionlib_msgs_GoalID {
	stamp : CommBasicObjects.CommTimeStamp
	id : String
}

CommObject Actionlib_msgs_GoalStatus {
	goal_id : Actionlib_msgs_GoalID
	status : UInt8
	text : String
}

CommObject Actionlib_msgs_GoalStatusArray {
	header : ROSRos_core.Std_msgs_Header
	status_list : Actionlib_msgs_GoalStatus[*]
}

CommObject Diagnostic_msgs_DiagnosticArray {
	header : ROSRos_core.Std_msgs_Header
	status : Diagnostic_msgs_DiagnosticStatus[*]
}

CommObject Diagnostic_msgs_DiagnosticStatus {
	level : UInt8
	name : String
	message : String
	hardware_id : String
	values : Diagnostic_msgs_KeyValue[*]
}

CommObject Diagnostic_msgs_KeyValue {
	key : String
	value : String
}

CommObject Diagnostic_msgs_AddDiagnosticsRequest {
	load_namespace : String
}
CommObject Diagnostic_msgs_AddDiagnosticsResponse {
	success : Boolean
	message : String
}

CommObject Diagnostic_msgs_SelfTestRequest {
}
CommObject Diagnostic_msgs_SelfTestResponse {
	id : String
	passed : UInt8
	status : Diagnostic_msgs_DiagnosticStatus[*]
}

CommObject Nav_msgs_GetMapAction {
	action_goal : Nav_msgs_GetMapActionGoal
	action_result : Nav_msgs_GetMapActionResult
	action_feedback : Nav_msgs_GetMapActionFeedback
}

CommObject Nav_msgs_GetMapActionFeedback {
	header : ROSRos_core.Std_msgs_Header
	status : Actionlib_msgs_GoalStatus
	feedback : Nav_msgs_GetMapFeedback
}

CommObject Nav_msgs_GetMapActionGoal {
	header : ROSRos_core.Std_msgs_Header
	goal_id : Actionlib_msgs_GoalID
	goal : Nav_msgs_GetMapGoal
}

CommObject Nav_msgs_GetMapActionResult {
	header : ROSRos_core.Std_msgs_Header
	status : Actionlib_msgs_GoalStatus
	result : Nav_msgs_GetMapResult
}

CommObject Nav_msgs_GetMapFeedback {
}

CommObject Nav_msgs_GetMapGoal {
}

CommObject Nav_msgs_GetMapResult {
	map : Nav_msgs_OccupancyGrid
}

CommObject Nav_msgs_GridCells {
	header : ROSRos_core.Std_msgs_Header
	cell_width : Float
	cell_height : Float
	cells : Geometry_msgs_Point[*]
}

CommObject Nav_msgs_MapMetaData {
	map_load_time : CommBasicObjects.CommTimeStamp
	resolution : Float
	width : UInt32
	height : UInt32
	origin : Geometry_msgs_Pose
}

CommObject Nav_msgs_OccupancyGrid {
	header : ROSRos_core.Std_msgs_Header
	info : Nav_msgs_MapMetaData
	data : Int8[*]
}

CommObject Nav_msgs_Odometry {
	header : ROSRos_core.Std_msgs_Header
	child_frame_id : String
	pose : Geometry_msgs_PoseWithCovariance
	twist : Geometry_msgs_TwistWithCovariance
}

CommObject Nav_msgs_Path {
	header : ROSRos_core.Std_msgs_Header
	poses : Geometry_msgs_PoseStamped[*]
}

CommObject Nav_msgs_GetMapRequest {
}
CommObject Nav_msgs_GetMapResponse {
	map : Nav_msgs_OccupancyGrid
}

CommObject Nav_msgs_GetPlanRequest {
	start : Geometry_msgs_PoseStamped
	goal : Geometry_msgs_PoseStamped
	tolerance : Float
}
CommObject Nav_msgs_GetPlanResponse {
	plan : Nav_msgs_Path
}

CommObject Nav_msgs_SetMapRequest {
	map : Nav_msgs_OccupancyGrid
	initial_pose : Geometry_msgs_PoseWithCovarianceStamped
}
CommObject Nav_msgs_SetMapResponse {
	success : Boolean
}

CommObject Sensor_msgs_BatteryState {
	header : ROSRos_core.Std_msgs_Header
	voltage : Float
	current : Float
	charge : Float
	capacity : Float
	design_capacity : Float
	percentage : Float
	power_supply_status : UInt8
	power_supply_health : UInt8
	power_supply_technology : UInt8
	present : Boolean
	cell_voltage : Float[*]
	location : String
	serial_number : String
}

CommObject Sensor_msgs_CameraInfo {
	header : ROSRos_core.Std_msgs_Header
	height : UInt32
	width : UInt32
	distortion_model : String
	D : Double[*]
	K : Double[*]
	R : Double[*]
	P : Double[*]
	binning_x : UInt32
	binning_y : UInt32
	roi : Sensor_msgs_RegionOfInterest
}

CommObject Sensor_msgs_ChannelFloat32 {
	name : String
	values : Float[*]
}

CommObject Sensor_msgs_CompressedImage {
	header : ROSRos_core.Std_msgs_Header
	format : String
	data : UInt8[*]
}

CommObject Sensor_msgs_FluidPressure {
	header : ROSRos_core.Std_msgs_Header
	fluid_pressure : Double
	variance : Double
}

CommObject Sensor_msgs_Illuminance {
	header : ROSRos_core.Std_msgs_Header
	illuminance : Double
	variance : Double
}

CommObject Sensor_msgs_Image {
	header : ROSRos_core.Std_msgs_Header
	height : UInt32
	width : UInt32
	encoding : String
	is_bigendian : UInt8
	step : UInt32
	data : UInt8[*]
}

CommObject Sensor_msgs_Imu {
	header : ROSRos_core.Std_msgs_Header
	orientation : Geometry_msgs_Quaternion
	orientation_covariance : Double[*]
	angular_velocity : Geometry_msgs_Vector3
	angular_velocity_covariance : Double[*]
	linear_acceleration : Geometry_msgs_Vector3
	linear_acceleration_covariance : Double[*]
}

CommObject Sensor_msgs_JointState {
	header : ROSRos_core.Std_msgs_Header
	name : String[*]
	position : Double[*]
	velocity : Double[*]
	effort : Double[*]
}

CommObject Sensor_msgs_Joy {
	header : ROSRos_core.Std_msgs_Header
	axes : Float[*]
	buttons : Int32[*]
}

CommObject Sensor_msgs_JoyFeedback {
	type : UInt8
	id : UInt8
	intensity : Float
}

CommObject Sensor_msgs_JoyFeedbackArray {
	array : Sensor_msgs_JoyFeedback[*]
}

CommObject Sensor_msgs_LaserEcho {
	echoes : Float[*]
}

CommObject Sensor_msgs_LaserScan {
	header : ROSRos_core.Std_msgs_Header
	angle_min : Float
	angle_max : Float
	angle_increment : Float
	time_increment : Float
	scan_time : Float
	range_min : Float
	range_max : Float
	ranges : Float[*]
	intensities : Float[*]
}

CommObject Sensor_msgs_MagneticField {
	header : ROSRos_core.Std_msgs_Header
	magnetic_field : Geometry_msgs_Vector3
	magnetic_field_covariance : Double[*]
}

CommObject Sensor_msgs_MultiDOFJointState {
	header : ROSRos_core.Std_msgs_Header
	joint_names : String[*]
	transforms : Geometry_msgs_Transform[*]
	twist : Geometry_msgs_Twist[*]
	wrench : Geometry_msgs_Wrench[*]
}

CommObject Sensor_msgs_MultiEchoLaserScan {
	header : ROSRos_core.Std_msgs_Header
	angle_min : Float
	angle_max : Float
	angle_increment : Float
	time_increment : Float
	scan_time : Float
	range_min : Float
	range_max : Float
	ranges : Sensor_msgs_LaserEcho[*]
	intensities : Sensor_msgs_LaserEcho[*]
}

CommObject Sensor_msgs_NavSatFix {
	header : ROSRos_core.Std_msgs_Header
	status : Sensor_msgs_NavSatStatus
	latitude : Double
	longitude : Double
	altitude : Double
	position_covariance : Double[*]
	position_covariance_type : UInt8
}

CommObject Sensor_msgs_NavSatStatus {
	status : Int8
	service : UInt16
}

CommObject Sensor_msgs_PointCloud {
	header : ROSRos_core.Std_msgs_Header
	points : Geometry_msgs_Point32[*]
	channels : Sensor_msgs_ChannelFloat32[*]
}

CommObject Sensor_msgs_PointCloud2 {
	header : ROSRos_core.Std_msgs_Header
	height : UInt32
	width : UInt32
	fields : Sensor_msgs_PointField[*]
	is_bigendian : Boolean
	point_step : UInt32
	row_step : UInt32
	data : UInt8[*]
	is_dense : Boolean
}

CommObject Sensor_msgs_PointField {
	name : String
	offset : UInt32
	datatype : UInt8
	count : UInt32
}

CommObject Sensor_msgs_Range {
	header : ROSRos_core.Std_msgs_Header
	radiation_type : UInt8
	field_of_view : Float
	min_range : Float
	max_range : Float
	range : Float
}

CommObject Sensor_msgs_RegionOfInterest {
	x_offset : UInt32
	y_offset : UInt32
	height : UInt32
	width : UInt32
	do_rectify : Boolean
}

CommObject Sensor_msgs_RelativeHumidity {
	header : ROSRos_core.Std_msgs_Header
	relative_humidity : Double
	variance : Double
}

CommObject Sensor_msgs_Temperature {
	header : ROSRos_core.Std_msgs_Header
	temperature : Double
	variance : Double
}

CommObject Sensor_msgs_TimeReference {
	header : ROSRos_core.Std_msgs_Header
	time_ref : CommBasicObjects.CommTimeStamp
	source : String
}

CommObject Sensor_msgs_SetCameraInfoRequest {
	camera_info : Sensor_msgs_CameraInfo
}
CommObject Sensor_msgs_SetCameraInfoResponse {
	success : Boolean
	status_message : String
}

CommObject Shape_msgs_Mesh {
	triangles : Shape_msgs_MeshTriangle[*]
	vertices : Geometry_msgs_Point[*]
}

CommObject Shape_msgs_MeshTriangle {
	vertex_indices : UInt32[*]
}

CommObject Shape_msgs_Plane {
	coef : Double[*]
}

CommObject Shape_msgs_SolidPrimitive {
	type : UInt8
	dimensions : Double[*]
}

CommObject Stereo_msgs_DisparityImage {
	header : ROSRos_core.Std_msgs_Header
	image : Sensor_msgs_Image
	f : Float
	T : Float
	valid_window : Sensor_msgs_RegionOfInterest
	min_disparity : Float
	max_disparity : Float
	delta_d : Float
}

CommObject Trajectory_msgs_JointTrajectory {
	header : ROSRos_core.Std_msgs_Header
	joint_names : String[*]
	points : Trajectory_msgs_JointTrajectoryPoint[*]
}

CommObject Trajectory_msgs_JointTrajectoryPoint {
	positions : Double[*]
	velocities : Double[*]
	accelerations : Double[*]
	effort : Double[*]
	time_from_start : CommBasicObjects.CommTimeStamp
}

CommObject Trajectory_msgs_MultiDOFJointTrajectory {
	header : ROSRos_core.Std_msgs_Header
	joint_names : String[*]
	points : Trajectory_msgs_MultiDOFJointTrajectoryPoint[*]
}

CommObject Trajectory_msgs_MultiDOFJointTrajectoryPoint {
	transforms : Geometry_msgs_Transform[*]
	velocities : Geometry_msgs_Twist[*]
	accelerations : Geometry_msgs_Twist[*]
	time_from_start : CommBasicObjects.CommTimeStamp
}

CommObject Visualization_msgs_ImageMarker {
	header : ROSRos_core.Std_msgs_Header
	ns : String
	id : Int32
	type : Int32
	action : Int32
	position : Geometry_msgs_Point
	scale : Float
	outline_color : ROSRos_core.Std_msgs_ColorRGBA
	filled : UInt8
	fill_color : ROSRos_core.Std_msgs_ColorRGBA
	lifetime : CommBasicObjects.CommTimeStamp
	points : Geometry_msgs_Point[*]
	outline_colors : ROSRos_core.Std_msgs_ColorRGBA[*]
}

CommObject Visualization_msgs_InteractiveMarker {
	header : ROSRos_core.Std_msgs_Header
	pose : Geometry_msgs_Pose
	name : String
	description : String
	scale : Float
	menu_entries : Visualization_msgs_MenuEntry[*]
	controls : Visualization_msgs_InteractiveMarkerControl[*]
}

CommObject Visualization_msgs_InteractiveMarkerControl {
	name : String
	orientation : Geometry_msgs_Quaternion
	orientation_mode : UInt8
	interaction_mode : UInt8
	always_visible : Boolean
	markers : Visualization_msgs_Marker[*]
	independent_marker_orientation : Boolean
	description : String
}

CommObject Visualization_msgs_InteractiveMarkerFeedback {
	header : ROSRos_core.Std_msgs_Header
	client_id : String
	marker_name : String
	control_name : String
	event_type : UInt8
	pose : Geometry_msgs_Pose
	menu_entry_id : UInt32
	mouse_point : Geometry_msgs_Point
	mouse_point_valid : Boolean
}

CommObject Visualization_msgs_InteractiveMarkerInit {
	server_id : String
	seq_num : UInt64
	markers : Visualization_msgs_InteractiveMarker[*]
}

CommObject Visualization_msgs_InteractiveMarkerPose {
	header : ROSRos_core.Std_msgs_Header
	pose : Geometry_msgs_Pose
	name : String
}

CommObject Visualization_msgs_InteractiveMarkerUpdate {
	server_id : String
	seq_num : UInt64
	type : UInt8
	markers : Visualization_msgs_InteractiveMarker[*]
	poses : Visualization_msgs_InteractiveMarkerPose[*]
	erases : String[*]
}

CommObject Visualization_msgs_Marker {
	header : ROSRos_core.Std_msgs_Header
	ns : String
	id : Int32
	type : Int32
	action : Int32
	pose : Geometry_msgs_Pose
	scale : Geometry_msgs_Vector3
	color : ROSRos_core.Std_msgs_ColorRGBA
	lifetime : CommBasicObjects.CommTimeStamp
	frame_locked : Boolean
	points : Geometry_msgs_Point[*]
	colors : ROSRos_core.Std_msgs_ColorRGBA[*]
	text : String
	mesh_resource : String
	mesh_use_embedded_materials : Boolean
}

CommObject Visualization_msgs_MarkerArray {
	markers : Visualization_msgs_Marker[*]
}

CommObject Visualization_msgs_MenuEntry {
	id : UInt32
	parent_id : UInt32
	title : String
	command : String
	command_type : UInt8
}

	
}
